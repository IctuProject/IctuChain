// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ictu/credit/resume.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Resume struct {
	CreditedTotal   uint64 `protobuf:"varint,1,opt,name=creditedTotal,proto3" json:"creditedTotal,omitempty"`
	ReturnedTotal   uint64 `protobuf:"varint,2,opt,name=returnedTotal,proto3" json:"returnedTotal,omitempty"`
	BalanceTotal    int32  `protobuf:"varint,3,opt,name=balanceTotal,proto3" json:"balanceTotal,omitempty"`
	CreditedCurrent uint64 `protobuf:"varint,4,opt,name=creditedCurrent,proto3" json:"creditedCurrent,omitempty"`
	ReturnedCurrent uint64 `protobuf:"varint,5,opt,name=returnedCurrent,proto3" json:"returnedCurrent,omitempty"`
	BalanceCurrent  int32  `protobuf:"varint,6,opt,name=balanceCurrent,proto3" json:"balanceCurrent,omitempty"`
}

func (m *Resume) Reset()         { *m = Resume{} }
func (m *Resume) String() string { return proto.CompactTextString(m) }
func (*Resume) ProtoMessage()    {}
func (*Resume) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48f50ac8bd6d2e1, []int{0}
}
func (m *Resume) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resume.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resume.Merge(m, src)
}
func (m *Resume) XXX_Size() int {
	return m.Size()
}
func (m *Resume) XXX_DiscardUnknown() {
	xxx_messageInfo_Resume.DiscardUnknown(m)
}

var xxx_messageInfo_Resume proto.InternalMessageInfo

func (m *Resume) GetCreditedTotal() uint64 {
	if m != nil {
		return m.CreditedTotal
	}
	return 0
}

func (m *Resume) GetReturnedTotal() uint64 {
	if m != nil {
		return m.ReturnedTotal
	}
	return 0
}

func (m *Resume) GetBalanceTotal() int32 {
	if m != nil {
		return m.BalanceTotal
	}
	return 0
}

func (m *Resume) GetCreditedCurrent() uint64 {
	if m != nil {
		return m.CreditedCurrent
	}
	return 0
}

func (m *Resume) GetReturnedCurrent() uint64 {
	if m != nil {
		return m.ReturnedCurrent
	}
	return 0
}

func (m *Resume) GetBalanceCurrent() int32 {
	if m != nil {
		return m.BalanceCurrent
	}
	return 0
}

func init() {
	proto.RegisterType((*Resume)(nil), "ictu.credit.Resume")
}

func init() { proto.RegisterFile("ictu/credit/resume.proto", fileDescriptor_e48f50ac8bd6d2e1) }

var fileDescriptor_e48f50ac8bd6d2e1 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xc8, 0x4c, 0x2e, 0x29,
	0xd5, 0x4f, 0x2e, 0x4a, 0x4d, 0xc9, 0x2c, 0xd1, 0x2f, 0x4a, 0x2d, 0x2e, 0xcd, 0x4d, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x06, 0xc9, 0xe8, 0x41, 0x64, 0x94, 0xbe, 0x30, 0x72, 0xb1,
	0x05, 0x81, 0x65, 0x85, 0x54, 0xb8, 0x78, 0x21, 0x82, 0xa9, 0x29, 0x21, 0xf9, 0x25, 0x89, 0x39,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0xa8, 0x82, 0x20, 0x55, 0x45, 0xa9, 0x25, 0xa5, 0x45,
	0x79, 0x30, 0x55, 0x4c, 0x10, 0x55, 0x28, 0x82, 0x42, 0x4a, 0x5c, 0x3c, 0x49, 0x89, 0x39, 0x89,
	0x79, 0xc9, 0xa9, 0x10, 0x45, 0xcc, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x28, 0x62, 0x42, 0x1a, 0x5c,
	0xfc, 0x30, 0xa3, 0x9d, 0x4b, 0x8b, 0x8a, 0x52, 0xf3, 0x4a, 0x24, 0x58, 0xc0, 0x66, 0xa1, 0x0b,
	0x83, 0x54, 0xc2, 0x8c, 0x87, 0xa9, 0x64, 0x85, 0xa8, 0x44, 0x13, 0x16, 0x52, 0xe3, 0xe2, 0x83,
	0xda, 0x01, 0x53, 0xc8, 0x06, 0xb6, 0x19, 0x4d, 0xd4, 0x49, 0xf7, 0xc4, 0x23, 0x39, 0xc6, 0x0b,
	0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86,
	0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x84, 0xc1, 0xe1, 0x56, 0x01, 0x0b, 0xb9, 0x92, 0xca, 0x82, 0xd4,
	0xe2, 0x24, 0x36, 0x70, 0xc8, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x29, 0x65, 0x8b,
	0x55, 0x01, 0x00, 0x00,
}

func (m *Resume) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BalanceCurrent != 0 {
		i = encodeVarintResume(dAtA, i, uint64(m.BalanceCurrent))
		i--
		dAtA[i] = 0x30
	}
	if m.ReturnedCurrent != 0 {
		i = encodeVarintResume(dAtA, i, uint64(m.ReturnedCurrent))
		i--
		dAtA[i] = 0x28
	}
	if m.CreditedCurrent != 0 {
		i = encodeVarintResume(dAtA, i, uint64(m.CreditedCurrent))
		i--
		dAtA[i] = 0x20
	}
	if m.BalanceTotal != 0 {
		i = encodeVarintResume(dAtA, i, uint64(m.BalanceTotal))
		i--
		dAtA[i] = 0x18
	}
	if m.ReturnedTotal != 0 {
		i = encodeVarintResume(dAtA, i, uint64(m.ReturnedTotal))
		i--
		dAtA[i] = 0x10
	}
	if m.CreditedTotal != 0 {
		i = encodeVarintResume(dAtA, i, uint64(m.CreditedTotal))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintResume(dAtA []byte, offset int, v uint64) int {
	offset -= sovResume(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Resume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreditedTotal != 0 {
		n += 1 + sovResume(uint64(m.CreditedTotal))
	}
	if m.ReturnedTotal != 0 {
		n += 1 + sovResume(uint64(m.ReturnedTotal))
	}
	if m.BalanceTotal != 0 {
		n += 1 + sovResume(uint64(m.BalanceTotal))
	}
	if m.CreditedCurrent != 0 {
		n += 1 + sovResume(uint64(m.CreditedCurrent))
	}
	if m.ReturnedCurrent != 0 {
		n += 1 + sovResume(uint64(m.ReturnedCurrent))
	}
	if m.BalanceCurrent != 0 {
		n += 1 + sovResume(uint64(m.BalanceCurrent))
	}
	return n
}

func sovResume(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResume(x uint64) (n int) {
	return sovResume(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Resume) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResume
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resume: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resume: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditedTotal", wireType)
			}
			m.CreditedTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreditedTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnedTotal", wireType)
			}
			m.ReturnedTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnedTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceTotal", wireType)
			}
			m.BalanceTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BalanceTotal |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditedCurrent", wireType)
			}
			m.CreditedCurrent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreditedCurrent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnedCurrent", wireType)
			}
			m.ReturnedCurrent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnedCurrent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceCurrent", wireType)
			}
			m.BalanceCurrent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResume
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BalanceCurrent |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResume(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResume
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResume(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResume
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResume
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResume
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResume
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResume
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResume
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResume        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResume          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResume = fmt.Errorf("proto: unexpected end of group")
)
