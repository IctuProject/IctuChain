// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ictu/credit/contract.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Contract struct {
	Uid              string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Req              string `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	Prov             string `protobuf:"bytes,3,opt,name=prov,proto3" json:"prov,omitempty"`
	Amount           uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Desc             string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	UtilLife         uint64 `protobuf:"varint,6,opt,name=utilLife,proto3" json:"utilLife,omitempty"`
	ReqSignature     string `protobuf:"bytes,7,opt,name=reqSignature,proto3" json:"reqSignature,omitempty"`
	ProvSignature    string `protobuf:"bytes,8,opt,name=provSignature,proto3" json:"provSignature,omitempty"`
	IsExtension      bool   `protobuf:"varint,9,opt,name=isExtension,proto3" json:"isExtension,omitempty"`
	TimeCreated      string `protobuf:"bytes,10,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeReqAccepted  string `protobuf:"bytes,11,opt,name=timeReqAccepted,proto3" json:"timeReqAccepted,omitempty"`
	TimeProvAccepted string `protobuf:"bytes,12,opt,name=timeProvAccepted,proto3" json:"timeProvAccepted,omitempty"`
	Creator          string `protobuf:"bytes,13,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d77cd2f1c677e29, []int{0}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return m.Size()
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Contract) GetReq() string {
	if m != nil {
		return m.Req
	}
	return ""
}

func (m *Contract) GetProv() string {
	if m != nil {
		return m.Prov
	}
	return ""
}

func (m *Contract) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Contract) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Contract) GetUtilLife() uint64 {
	if m != nil {
		return m.UtilLife
	}
	return 0
}

func (m *Contract) GetReqSignature() string {
	if m != nil {
		return m.ReqSignature
	}
	return ""
}

func (m *Contract) GetProvSignature() string {
	if m != nil {
		return m.ProvSignature
	}
	return ""
}

func (m *Contract) GetIsExtension() bool {
	if m != nil {
		return m.IsExtension
	}
	return false
}

func (m *Contract) GetTimeCreated() string {
	if m != nil {
		return m.TimeCreated
	}
	return ""
}

func (m *Contract) GetTimeReqAccepted() string {
	if m != nil {
		return m.TimeReqAccepted
	}
	return ""
}

func (m *Contract) GetTimeProvAccepted() string {
	if m != nil {
		return m.TimeProvAccepted
	}
	return ""
}

func (m *Contract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Contract)(nil), "ictu.credit.Contract")
}

func init() { proto.RegisterFile("ictu/credit/contract.proto", fileDescriptor_9d77cd2f1c677e29) }

var fileDescriptor_9d77cd2f1c677e29 = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xbf, 0x4e, 0x02, 0x41,
	0x10, 0xc6, 0x59, 0x41, 0x38, 0x06, 0x88, 0x64, 0x4d, 0xcc, 0x86, 0x62, 0x73, 0x21, 0x16, 0x17,
	0x13, 0xa1, 0xf0, 0x09, 0x94, 0xd8, 0x59, 0x98, 0xb3, 0xb3, 0x3b, 0xf7, 0x46, 0xb3, 0x89, 0xdc,
	0xde, 0xed, 0xcd, 0x11, 0x7c, 0x03, 0x4b, 0x1f, 0xcb, 0x92, 0xd2, 0xd2, 0xc0, 0x8b, 0x98, 0x5d,
	0xfe, 0x08, 0xda, 0xcd, 0xf7, 0x9b, 0xdf, 0xee, 0x14, 0x1f, 0x0c, 0xb4, 0xa2, 0x6a, 0xac, 0x2c,
	0xa6, 0x9a, 0xc6, 0xca, 0x64, 0x64, 0x13, 0x45, 0xa3, 0xdc, 0x1a, 0x32, 0xbc, 0xe3, 0x76, 0xa3,
	0xf5, 0x6e, 0xf8, 0x5e, 0x87, 0x60, 0xb2, 0xd9, 0xf3, 0x3e, 0xd4, 0x2b, 0x9d, 0x0a, 0x16, 0xb2,
	0xa8, 0x1d, 0xbb, 0xd1, 0x11, 0x8b, 0x85, 0x38, 0x5a, 0x13, 0x8b, 0x05, 0xe7, 0xd0, 0xc8, 0xad,
	0x99, 0x89, 0xba, 0x47, 0x7e, 0xe6, 0x67, 0xd0, 0x4c, 0xa6, 0xa6, 0xca, 0x48, 0x34, 0x42, 0x16,
	0x35, 0xe2, 0x4d, 0x72, 0x6e, 0x8a, 0xa5, 0x12, 0xc7, 0x6b, 0xd7, 0xcd, 0x7c, 0x00, 0x41, 0x45,
	0xfa, 0xf5, 0x4e, 0x3f, 0xa3, 0x68, 0x7a, 0x7b, 0x97, 0xf9, 0x10, 0xba, 0x16, 0x8b, 0x07, 0xfd,
	0x92, 0x25, 0x54, 0x59, 0x14, 0x2d, 0xff, 0xee, 0x80, 0xf1, 0x73, 0xe8, 0xb9, 0x9b, 0xbf, 0x52,
	0xe0, 0xa5, 0x43, 0xc8, 0x43, 0xe8, 0xe8, 0xf2, 0x76, 0x4e, 0x98, 0x95, 0xda, 0x64, 0xa2, 0x1d,
	0xb2, 0x28, 0x88, 0xf7, 0x91, 0x33, 0x48, 0x4f, 0x71, 0x62, 0x31, 0x21, 0x4c, 0x05, 0xf8, 0x5f,
	0xf6, 0x11, 0x8f, 0xe0, 0xc4, 0xc5, 0x18, 0x8b, 0x6b, 0xa5, 0x30, 0x77, 0x56, 0xc7, 0x5b, 0x7f,
	0x31, 0xbf, 0x80, 0xbe, 0x43, 0xf7, 0xd6, 0xcc, 0x76, 0x6a, 0xd7, 0xab, 0xff, 0x38, 0x17, 0xd0,
	0x52, 0xee, 0x80, 0xb1, 0xa2, 0xe7, 0x95, 0x6d, 0xbc, 0xb9, 0xfc, 0x5c, 0x4a, 0xb6, 0x58, 0x4a,
	0xf6, 0xbd, 0x94, 0xec, 0x63, 0x25, 0x6b, 0x8b, 0x95, 0xac, 0x7d, 0xad, 0x64, 0xed, 0xf1, 0xd4,
	0xb7, 0x39, 0xdf, 0xf6, 0x49, 0x6f, 0x39, 0x96, 0x4f, 0x4d, 0xdf, 0xe6, 0xd5, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xba, 0xb3, 0xb0, 0x47, 0xeb, 0x01, 0x00, 0x00,
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TimeProvAccepted) > 0 {
		i -= len(m.TimeProvAccepted)
		copy(dAtA[i:], m.TimeProvAccepted)
		i = encodeVarintContract(dAtA, i, uint64(len(m.TimeProvAccepted)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TimeReqAccepted) > 0 {
		i -= len(m.TimeReqAccepted)
		copy(dAtA[i:], m.TimeReqAccepted)
		i = encodeVarintContract(dAtA, i, uint64(len(m.TimeReqAccepted)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TimeCreated) > 0 {
		i -= len(m.TimeCreated)
		copy(dAtA[i:], m.TimeCreated)
		i = encodeVarintContract(dAtA, i, uint64(len(m.TimeCreated)))
		i--
		dAtA[i] = 0x52
	}
	if m.IsExtension {
		i--
		if m.IsExtension {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.ProvSignature) > 0 {
		i -= len(m.ProvSignature)
		copy(dAtA[i:], m.ProvSignature)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ProvSignature)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReqSignature) > 0 {
		i -= len(m.ReqSignature)
		copy(dAtA[i:], m.ReqSignature)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ReqSignature)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UtilLife != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.UtilLife))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Desc) > 0 {
		i -= len(m.Desc)
		copy(dAtA[i:], m.Desc)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Desc)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Prov) > 0 {
		i -= len(m.Prov)
		copy(dAtA[i:], m.Prov)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Prov)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Req) > 0 {
		i -= len(m.Req)
		copy(dAtA[i:], m.Req)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Req)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Req)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Prov)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovContract(uint64(m.Amount))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.UtilLife != 0 {
		n += 1 + sovContract(uint64(m.UtilLife))
	}
	l = len(m.ReqSignature)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.ProvSignature)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.IsExtension {
		n += 2
	}
	l = len(m.TimeCreated)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.TimeReqAccepted)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.TimeProvAccepted)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func sovContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContract(x uint64) (n int) {
	return sovContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Req = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prov", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prov = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtilLife", wireType)
			}
			m.UtilLife = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtilLife |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvSignature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvSignature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExtension", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExtension = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeCreated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeReqAccepted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeReqAccepted = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeProvAccepted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeProvAccepted = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContract = fmt.Errorf("proto: unexpected end of group")
)
