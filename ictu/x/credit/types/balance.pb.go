// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ictu/credit/balance.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Balance struct {
	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IdContract        string `protobuf:"bytes,2,opt,name=idContract,proto3" json:"idContract,omitempty"`
	Requester         string `protobuf:"bytes,3,opt,name=requester,proto3" json:"requester,omitempty"`
	Credited          uint64 `protobuf:"varint,4,opt,name=credited,proto3" json:"credited,omitempty"`
	Returned          uint64 `protobuf:"varint,5,opt,name=returned,proto3" json:"returned,omitempty"`
	ExpirationDate    string `protobuf:"bytes,6,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	ReturnPeriodicity string `protobuf:"bytes,7,opt,name=returnPeriodicity,proto3" json:"returnPeriodicity,omitempty"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_4272dd77ba8f67de, []int{0}
}
func (m *Balance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(m, src)
}
func (m *Balance) XXX_Size() int {
	return m.Size()
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Balance) GetIdContract() string {
	if m != nil {
		return m.IdContract
	}
	return ""
}

func (m *Balance) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

func (m *Balance) GetCredited() uint64 {
	if m != nil {
		return m.Credited
	}
	return 0
}

func (m *Balance) GetReturned() uint64 {
	if m != nil {
		return m.Returned
	}
	return 0
}

func (m *Balance) GetExpirationDate() string {
	if m != nil {
		return m.ExpirationDate
	}
	return ""
}

func (m *Balance) GetReturnPeriodicity() string {
	if m != nil {
		return m.ReturnPeriodicity
	}
	return ""
}

func init() {
	proto.RegisterType((*Balance)(nil), "ictu.credit.Balance")
}

func init() { proto.RegisterFile("ictu/credit/balance.proto", fileDescriptor_4272dd77ba8f67de) }

var fileDescriptor_4272dd77ba8f67de = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xbf, 0x4a, 0x03, 0x41,
	0x10, 0xc6, 0x6f, 0xcf, 0x98, 0x98, 0x11, 0x02, 0xae, 0xcd, 0x2a, 0xb2, 0x04, 0x0b, 0x49, 0xa1,
	0x49, 0xe1, 0x1b, 0x44, 0x1f, 0x40, 0x52, 0xda, 0x6d, 0x76, 0xa7, 0x18, 0x90, 0xdb, 0x73, 0x32,
	0x07, 0xc9, 0x5b, 0xf8, 0x58, 0x96, 0x29, 0x2d, 0xe5, 0x0e, 0xdf, 0x43, 0xb2, 0x4b, 0x54, 0x4c,
	0xf9, 0xfd, 0x7e, 0xf3, 0x07, 0x3e, 0xb8, 0x20, 0x2f, 0xcd, 0xcc, 0x33, 0x06, 0x92, 0xd9, 0xd2,
	0xbd, 0xb8, 0xca, 0xe3, 0xb4, 0xe6, 0x28, 0x51, 0x9f, 0xee, 0xd4, 0x34, 0xab, 0xeb, 0x2f, 0x05,
	0x83, 0x79, 0xd6, 0x7a, 0x04, 0x25, 0x05, 0xa3, 0xc6, 0x6a, 0x32, 0x5c, 0x94, 0x14, 0xb4, 0x05,
	0xa0, 0xf0, 0x10, 0x2b, 0x61, 0xe7, 0xc5, 0x94, 0x89, 0xff, 0x21, 0xfa, 0x0a, 0x86, 0x8c, 0xaf,
	0x0d, 0xae, 0x04, 0xd9, 0x1c, 0x25, 0xfd, 0x0b, 0xf4, 0x25, 0x9c, 0xe4, 0x1f, 0x18, 0x4c, 0x6f,
	0xac, 0x26, 0xbd, 0xc5, 0x4f, 0xde, 0x39, 0x46, 0x69, 0xb8, 0xc2, 0x60, 0x8e, 0xb3, 0xdb, 0x67,
	0x7d, 0x03, 0x23, 0x5c, 0xd7, 0xc4, 0x4e, 0x28, 0x56, 0x8f, 0x4e, 0xd0, 0xf4, 0xd3, 0xe9, 0x7f,
	0x54, 0xdf, 0xc2, 0x59, 0xde, 0x79, 0x42, 0xa6, 0x18, 0xc8, 0x93, 0x6c, 0xcc, 0x20, 0x8d, 0x1e,
	0x8a, 0xf9, 0xdd, 0x7b, 0x6b, 0xd5, 0xb6, 0xb5, 0xea, 0xb3, 0xb5, 0xea, 0xad, 0xb3, 0xc5, 0xb6,
	0xb3, 0xc5, 0x47, 0x67, 0x8b, 0xe7, 0xf3, 0xd4, 0xd4, 0x7a, 0xdf, 0x95, 0x6c, 0x6a, 0x5c, 0x2d,
	0xfb, 0xa9, 0xaa, 0xfb, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0x8e, 0x60, 0x3f, 0x47, 0x01,
	0x00, 0x00,
}

func (m *Balance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Balance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Balance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReturnPeriodicity) > 0 {
		i -= len(m.ReturnPeriodicity)
		copy(dAtA[i:], m.ReturnPeriodicity)
		i = encodeVarintBalance(dAtA, i, uint64(len(m.ReturnPeriodicity)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExpirationDate) > 0 {
		i -= len(m.ExpirationDate)
		copy(dAtA[i:], m.ExpirationDate)
		i = encodeVarintBalance(dAtA, i, uint64(len(m.ExpirationDate)))
		i--
		dAtA[i] = 0x32
	}
	if m.Returned != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Returned))
		i--
		dAtA[i] = 0x28
	}
	if m.Credited != 0 {
		i = encodeVarintBalance(dAtA, i, uint64(m.Credited))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintBalance(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IdContract) > 0 {
		i -= len(m.IdContract)
		copy(dAtA[i:], m.IdContract)
		i = encodeVarintBalance(dAtA, i, uint64(len(m.IdContract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBalance(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBalance(dAtA []byte, offset int, v uint64) int {
	offset -= sovBalance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Balance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBalance(uint64(l))
	}
	l = len(m.IdContract)
	if l > 0 {
		n += 1 + l + sovBalance(uint64(l))
	}
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovBalance(uint64(l))
	}
	if m.Credited != 0 {
		n += 1 + sovBalance(uint64(m.Credited))
	}
	if m.Returned != 0 {
		n += 1 + sovBalance(uint64(m.Returned))
	}
	l = len(m.ExpirationDate)
	if l > 0 {
		n += 1 + l + sovBalance(uint64(l))
	}
	l = len(m.ReturnPeriodicity)
	if l > 0 {
		n += 1 + l + sovBalance(uint64(l))
	}
	return n
}

func sovBalance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBalance(x uint64) (n int) {
	return sovBalance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Balance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Balance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Balance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credited", wireType)
			}
			m.Credited = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Credited |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Returned", wireType)
			}
			m.Returned = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Returned |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnPeriodicity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnPeriodicity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBalance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBalance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBalance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBalance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBalance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBalance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBalance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBalance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBalance = fmt.Errorf("proto: unexpected end of group")
)
